/**
 * Collection Write Interface
 * @desczh
 * 可写入集合接口
 * @file
 * @since 0.2.0
 */
import { Kind, URIS } from 'fp-ts/lib/HKT'
import { Option } from 'fp-ts/lib/Option'
import * as O from 'fp-ts/lib/Option'
import { ReaderCollection } from './Reader'
import { pipe } from 'fp-ts/lib/pipeable';
import { Predicate } from 'macoolka-predicate'
/**
 * Collection Write Input Interface
 * @desczh
 * 可写入集合输入接口
 * @since 0.2.0
 */
export interface WriteCollectionInput<URI extends URIS> {

  /**
    * Delete the element at the specified index, creating a new collection, or returning `None` if the index is out of bounds
    * @desczh
    * 删除一个指定位置的元素，返回删除后的集合
    * @example
    * import { deleteAt } from 'fp-ts/lib/Array'
    * import { some, none } from 'fp-ts/lib/Option'
    *
    * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))
    * assert.deepStrictEqual(deleteAt(1)([]), none)
    *
    * @since 2.0.0
    */
  _deleteAt: <A>(i: number) => (as: Kind<URI, A>) => Kind<URI, A>
  /**
   * Change the element at the specified index, creating a new collection, or returning `None` if the index is out of bounds
   * @desczh
   * 修改一个指定位置的元素，返回修改后的集合
   * @example
   * import { setAt } from 'fp-ts/lib/Array'
   * import { some, none } from 'fp-ts/lib/Option'
   *
   * assert.deepStrictEqual(setAt(1, 1)([1, 2, 3]), some([1, 1, 3]))
   * assert.deepStrictEqual(setAt(1, 1)([]), none)
   *
   * @since 2.0.0
   */
  _setAt: <A>(i: number, a: A) => (as: Kind<URI, A>) => Kind<URI, A>
  /**
    * Insert an element at the specified index, creating a new list, or returning `None` if the index is out of bounds
    * @desczh
    * 插入一个指定位置的元素，返回插入后的集合
    * @example
    * import { insertAt } from 'fp-ts/lib/List'
    * import { some } from 'fp-ts/lib/Option'
    *
    * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))
    *
    * @since 0.5.0
    */
  _insertAt<A>(i: number, a: A): (as: Kind<URI, A>) => Kind<URI, A>

}
export interface Writer<F extends URIS> extends WriteCollectionInput<F>, ReaderCollection<F> {
  /**
  * Delete the element at the specified index, creating a new collection, or returning `None` if the index is out of bounds
  * @desczh
  * 删除一个指定位置的元素，返回删除后的集合
  * @example
  * import { deleteAt } from 'fp-ts/lib/Array'
  * import { some, none } from 'fp-ts/lib/Option'
  *
  * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))
  * assert.deepStrictEqual(deleteAt(1)([]), none)
  * 
  * @since 2.0.0
  */
  deleteAt: <A>(i: number) => (as: Kind<F, A>) => Option<Kind<F, A>>
  /**
   * Change the element at the specified index, creating a new collection, or returning `None` if the index is out of bounds
   * @desczh
   * 修改一个指定位置的元素，返回修改后的集合
   * @example
   * import { setAt } from 'fp-ts/lib/Array'
   * import { some, none } from 'fp-ts/lib/Option'
   *
   * assert.deepStrictEqual(setAt(1, 1)([1, 2, 3]), some([1, 1, 3]))
   * assert.deepStrictEqual(setAt(1, 1)([]), none)
   *
   * @since 2.0.0
   */
  setAt: <A>(i: number, a: A) => (as: Kind<F, A>) => Option<Kind<F, A>>
  /**
    * Insert an element at the specified index, creating a new list, or returning `None` if the index is out of bounds
    * @desczh
    * 插入一个指定位置的元素，返回插入后的集合
    * @example
    * import { insertAt } from 'fp-ts/lib/List'
    * import { some } from 'fp-ts/lib/Option'
    *
    * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))
    *
    * @since 0.5.0
    */
  insertAt<A>(i: number, a: A): (as: Kind<F, A>) => Option<Kind<F, A>>
   
  /**
   * Change the element at the specified index and current item, creating a new collection, or returning `None` if the index is out of bounds
   * @desczh
   * 修改一个指定位置的元素，返回修改后的集合
   * @example
   * import { updateAt } from 'fp-ts/lib/Array'
   * import { some, none } from 'fp-ts/lib/Option'
   *
   * assert.deepStrictEqual(updateAt(1, a=>a+1)([1, 2, 3]), some([1, 3, 3]))
   *
   * @since 2.0.0
   */
  updateAt: <A>(i: number, updater: (a: A) => A) => (as: Kind<F, A>) => Option<Kind<F, A>>
  /**
   * Change the element wtih the specified condition and current item,
   * creating a new collection.
   * @desczh
   * 修改一些满足条件的元素，返回修改后的集合
   * @example
   * import { updateWith,from } from 'macoolka-array'
   * import { pipe } from 'fp-ts/lib/pipeable'
   *
   * pipe(
   *  from([1, 2, 3]),
   *  updateWith(a => a === 2, a => a + 1),
   *  a => expect(a).toEqual(from([1, 3, 3]))
   * )
   *
   * @since 2.0.0
   */
  updateWith: <A>(predicate: Predicate<A>, updater: (a: A) => A) => (as: Kind<F, A>) => Kind<F, A>
  /**
   * delete the element wtih the specified condition,
   * creating a new collection.
   * @desczh
   * 删除一些满足条件的元素，返回删除后的集合
   * @example
   * import { deleteWith,from } from 'macoolka-array'
   * import { pipe } from 'fp-ts/lib/pipeable'
   *
   * pipe(
   *  from([1, 2, 3]),
   *  deleteWith(a => a === 2 || a===1),
   *  a => expect(a).toEqual(from([3]))
   * )
   *
   * @since 2.0.0
   */
  deleteWith: <A>(predicate: Predicate<A>) => (as: Kind<F, A>) => Kind<F, A>

  /**
   * Attaches an element to the front of an `Collection`, creating a new non empty `Collection`
   * @desczh
   * 插入一个元素到集合头,返回新集合.
   * @example
   * import { cons } from 'fp-ts/lib/Array'
   *
   * assert.deepStrictEqual(cons(0)([1, 2, 3]), [0, 1, 2, 3])
   *
   * @since 2.0.0
   */

  cons: <A>(head: A) => (tail: Kind<F, A>) => Kind<F, A>
  /**
   * Append an element to the end of an `Collection`, creating a new `Collection`
   * @desczh
   * 插入一个元素到集合尾部,返回新集合.
   * @example
   * import { snoc } from 'fp-ts/lib/Array'
   *
   * assert.deepStrictEqual(snoc(4)([1, 2, 3]), [1, 2, 3, 4])
   *
   * @since 2.0.0
   */
  snoc: <A>(end: A) => (init: Kind<F, A>) => Kind<F, A>
  /**
 * Append an element to the end of an `Collection`, creating a new `Collection`
 * @alias snoc
 * @desczh
 * 插入一个元素到集合尾部,返回新集合.是snoc的别名.
 * @example
 * import { push } from 'fp-ts/lib/Array'
 *
 * assert.deepStrictEqual(push(4)([1, 2, 3]), [1, 2, 3, 4])
 *
 * @since 2.0.0
 */
  push: <A>(end: A) => (init: Kind<F, A>) => Kind<F, A>

}
export function initWriter<F extends URIS>(option: WriteCollectionInput<F> & ReaderCollection<F>): Writer<F> {
  const { size, _insertAt, _deleteAt, getAt, _setAt, existAt, findIndex,_getAt } = option

  const insertAt: Writer<F>['insertAt'] = (i, a) => as => {
    return pipe(
      as,
      O.fromPredicate(as => i <= size(as) && i >= 0),
      O.map(
        pipe(
          _insertAt(i, a)
        )

      )
    )
  }
  const deleteAt: Writer<F>['deleteAt'] = (i) => as => {
    return pipe(
      as,
      O.fromPredicate(existAt(i)),
      O.map(
        pipe(
          _deleteAt(i)
        )

      )
    )
  }
  const setAt: Writer<F>['setAt'] = (i, a) => as => {
    return pipe(
      as,
      O.fromPredicate(existAt(i)),
      O.map(
        pipe(
          _setAt(i, a)
        )

      )
    )
  }
  function cons<A>(head: A): (init: Kind<F, A>) => Kind<F, A> {
    return as => {
      return pipe(
        as,
        insertAt(0, head),

        O.getOrElse(() => as)
      )
    }
  }
  /**
   * Append an element to the end of an `Collection`, creating a new `Collection`
   *
   * @example
   * import { snoc } from 'fp-ts/lib/Array'
   *
   * assert.deepStrictEqual(snoc(4)([1, 2, 3]), [1, 2, 3, 4])
   *
   * @since 2.0.0
   */
  function snoc<A>(end: A): (tail: Kind<F, A>) => Kind<F, A> {
    return as => {
      return pipe(
        as,
        insertAt(size(as), end),
        O.getOrElse(() => as)
      )
    }
  }

  /**
  * Change the element at the specified index and current item, creating a new collection, or returning `None` if the index is out of bounds
  *
  * @example
  * import { updateAt } from 'fp-ts/lib/Array'
  * import { some, none } from 'fp-ts/lib/Option'
  *
  * assert.deepStrictEqual(updateAt(1, a=>a+1)([1, 2, 3]), some([1, 3, 3]))
  *
  * @since 2.0.0
  */
  function updateAt<A>(i: number, updater: (a: A) => A): (as: Kind<F, A>) => Option<Kind<F, A>> {
    return as => {
      return pipe(
        as,
        getAt(i),
        O.chain(value => {
          return pipe(
            as,
            setAt(i, updater(value))
          )
        })

      )
    }
  }
  const deleteWith: Writer<F>['deleteWith'] = predicate => as => pipe(
    as,
    findIndex(predicate),
    indexs => {
      const ns = indexs.reverse()
      let store: Kind<F, any> = as;
      ns.map(i => {
        store = _deleteAt(i)(store)
      })
 
      return store
    }

  )
  const upateWith: Writer<F>['updateWith'] = (predicate, updater) => as => pipe(
    as,
    findIndex(predicate),
    indexs => {
      const ns = indexs.reverse()
     
      let store: Kind<F, any> = as;
      ns.map(i => {
        store = _setAt(i, updater(_getAt(i)(store)))(store)
        
      })
  
      return store
    }

  )


  return {
    cons,
    snoc,
    push: snoc,
    updateAt,
    insertAt,
    setAt,
    deleteWith,
    updateWith: upateWith,
    deleteAt,
    ...option
  }

}